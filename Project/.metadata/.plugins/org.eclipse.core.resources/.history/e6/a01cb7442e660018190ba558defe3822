import java.awt.Color;

import java.awt.Dimension;
import java.awt.Font;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Collections;
import java.util.Iterator;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

import javax.swing.*;
import javax.swing.border.Border;
/**
 * New toolbar
 * @author Dannydani
 *
 */
public class Toolbar extends JPanel
{
	AddNewDownload and;
	JButton newDownload;
	JButton pause;
	JButton resume;
	JButton cancel;
	JButton remove;
	JButton setting;
	JButton sort;
	JTextField search;
	JButton searchIcon;
	JButton zip;
	public Toolbar(AddNewDownload and)
	{
		this.and=and;
		int dim=0;
		
		
		ImageIcon cancelPic=new ImageIcon("if_x-circle_2561211.png");
		ImageIcon resumePic=new ImageIcon("if_play_2561370.png");
		ImageIcon newDownloadPic=new ImageIcon("if_plus-circle_2561291.png");
		ImageIcon removePic=new ImageIcon("if_trash-2_2561228.png");
		ImageIcon settingPic=new ImageIcon("if_settings_2561383.png");
		ImageIcon pausePic=new ImageIcon("if_pause_2561367.png");
		ImageIcon searchPic=new ImageIcon("if_icon-ios7-search-strong_211817.png");
		ImageIcon sortPic=new ImageIcon("if_sort-alpha-asc_1608407.png");
		ImageIcon zipPic=new ImageIcon("if_02_2071087.png");
		
		
		newDownload=new JButton(newDownloadPic);
		pause=new JButton(pausePic);
		cancel=new JButton(cancelPic);
		resume=new JButton(resumePic);
		remove=new JButton(removePic);
		setting=new JButton(settingPic);
		searchIcon=new JButton(searchPic);
		sort=new JButton(sortPic);
		zip=new JButton(zipPic);
		
		
		
		
		newDownload.setToolTipText("New Download");
		resume.setToolTipText("Resume");
		cancel.setToolTipText("Cancel");
		pause.setToolTipText("Pause");
		remove.setToolTipText("Remove");
		setting.setToolTipText("Setting");
		search=new JTextField();
		
		
		
		
		Border emptyBorder = BorderFactory.createEmptyBorder();
		pause.setBorder(emptyBorder);
		remove.setBorder(emptyBorder);
		setting.setBorder(emptyBorder);
		cancel.setBorder(emptyBorder);
		resume.setBorder(emptyBorder);
		newDownload.setBorder(emptyBorder);
		search.setBorder(emptyBorder);
		searchIcon.setBorder(emptyBorder);
		search.setFont(new Font("Arial", Font.BOLD, 20));
		search.setBorder(emptyBorder);
		sort.setBorder(emptyBorder);
		zip.setBorder(emptyBorder);
		
		cancel.setPreferredSize(new Dimension(100, 60));
		remove.setPreferredSize(new Dimension(100, 60));
		pause.setPreferredSize(new Dimension(100, 60));
		setting.setPreferredSize(new Dimension(100, 60));
		newDownload.setPreferredSize(new Dimension(100, 60));
		resume.setPreferredSize(new Dimension(100, 60));
		//searchIcon.setPreferredSize(new Dimension(100, 60));
		sort.setPreferredSize(new Dimension(100, 60));
		zip.setPreferredSize(new Dimension(100, 60));
		
		resume.setBackground(Color.GRAY);
		cancel.setBackground(Color.GRAY);
		setting.setBackground(Color.GRAY);
		newDownload.setBackground(Color.GRAY);
		pause.setBackground(Color.GRAY);
		remove.setBackground(Color.GRAY);
		searchIcon.setBackground(Color.GRAY);
		sort.setBackground(Color.gray);
		zip.setBackground(Color.gray);
		
		
		this.add(newDownload);
		this.add(pause);
		this.add(resume);
		this.add(remove);
		this.add(setting);
		this.add(cancel);
		this.add(sort);
		this.add(search);
		this.add(searchIcon);
		this.add(zip);
		
		
		
		
		
		SpringLayout layout=new SpringLayout();
		
		
		layout.putConstraint(SpringLayout.WEST, newDownload, 10, SpringLayout.WEST, this);
		layout.putConstraint(SpringLayout.WEST, pause, 0 , SpringLayout.EAST, newDownload);
		layout.putConstraint(SpringLayout.WEST, resume, dim , SpringLayout.EAST, pause);
		layout.putConstraint(SpringLayout.WEST, remove, dim , SpringLayout.EAST, resume);
		layout.putConstraint(SpringLayout.WEST, cancel, dim , SpringLayout.EAST, remove);
		layout.putConstraint(SpringLayout.WEST, setting, +dim , SpringLayout.EAST, cancel);
		layout.putConstraint(SpringLayout.WEST, sort, +dim , SpringLayout.EAST, setting);
		layout.putConstraint(SpringLayout.WEST, zip, +dim , SpringLayout.EAST, sort);
		
		
		//layout.putConstraint(SpringLayout.WEST, searchIcon, 0	 , SpringLayout.EAST, zip);
		//layout.putConstraint(SpringLayout.WEST, search, 0 , SpringLayout.EAST, searchIcon);
		//layout.putConstraint(SpringLayout.EAST, search, -10 , SpringLayout.EAST, this);
		//layout.putConstraint(SpringLayout.WEST, set, +dim , SpringLayout.EAST, sort);
		
		layout.putConstraint(SpringLayout.EAST, searchIcon, 0 , SpringLayout.WEST, search);
		layout.putConstraint(SpringLayout.EAST, search, -10 , SpringLayout.EAST, this);
		search.setPreferredSize(new Dimension(200, 0));
		//searchIcon.setPreferredSize(new Dimension(40, 0));
		//layout.putConstraint(SpringLayout.WEST, set, +dim , SpringLayout.EAST, sort);
		//layout.removeLayoutComponent(searchIcon);
		
		
		
		
		layout.putConstraint(SpringLayout.NORTH, sort, 15, SpringLayout.NORTH, this);
		layout.putConstraint(SpringLayout.SOUTH, sort, -15, SpringLayout.SOUTH, this);
		
		
		layout.putConstraint(SpringLayout.NORTH, newDownload, 15, SpringLayout.NORTH, this);
		layout.putConstraint(SpringLayout.SOUTH, newDownload, -15, SpringLayout.SOUTH, this);

		
		layout.putConstraint(SpringLayout.NORTH, pause, 15, SpringLayout.NORTH, this);
		layout.putConstraint(SpringLayout.SOUTH, pause, -15, SpringLayout.SOUTH, this);
		
		layout.putConstraint(SpringLayout.NORTH, resume, 15, SpringLayout.NORTH, this);
		layout.putConstraint(SpringLayout.SOUTH, resume, -15, SpringLayout.SOUTH, this);
		
		layout.putConstraint(SpringLayout.NORTH, remove, 15, SpringLayout.NORTH, this);
		layout.putConstraint(SpringLayout.SOUTH, remove, -15, SpringLayout.SOUTH, this);
		
		layout.putConstraint(SpringLayout.NORTH, cancel, 15, SpringLayout.NORTH, this);
		layout.putConstraint(SpringLayout.SOUTH, cancel, -15, SpringLayout.SOUTH, this);
		
		layout.putConstraint(SpringLayout.NORTH, setting, 15, SpringLayout.NORTH, this);
		layout.putConstraint(SpringLayout.SOUTH, setting, -15, SpringLayout.SOUTH, this);
		
		layout.putConstraint(SpringLayout.NORTH, searchIcon, 15, SpringLayout.NORTH, this);
		layout.putConstraint(SpringLayout.SOUTH, searchIcon, -15, SpringLayout.SOUTH, this);

		layout.putConstraint(SpringLayout.NORTH, search, 15, SpringLayout.NORTH, this);
		layout.putConstraint(SpringLayout.SOUTH, search, -15, SpringLayout.SOUTH, this);

		layout.putConstraint(SpringLayout.NORTH, zip, 15, SpringLayout.NORTH, this);
		layout.putConstraint(SpringLayout.SOUTH, zip, -15, SpringLayout.SOUTH, this);
		
		this.setBackground(Color.GRAY);
		
		
		
		
		setting.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				Setting setting=new Setting();
				setting.show();
			}
		});
		resume.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) 
			{
				AddNewDownload.resume();
			}
		});
		cancel.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent arg0) {
				System.out.println("cancel");
				
			}
		});
		remove.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				try {
					and.find();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}	
			}
		});
		
		
		
		newDownload.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				FileChoosing newdl=new FileChoosing(and);
				newdl.show();
			}
		});
		
		
		searchIcon.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				Iterator<DownloadMenu> iterator2=AddNewDownload.array.iterator();
				while(iterator2.hasNext())
				{
					DownloadMenu dm=iterator2.next();
					dm.setBackground(null);
				}
				if (search.getText().isEmpty()!=true)
				{
					String string=search.getText();
					Iterator<DownloadMenu> iterator=AddNewDownload.array.iterator();
					while(iterator.hasNext())
					{
						DownloadMenu dm=iterator.next();
						if (dm.getDownloadName().contains(string))
						{
							dm.setBackground(Color.ORANGE);
						}
					}
				}
				else
				{
					Iterator<DownloadMenu> iterator=AddNewDownload.array.iterator();
					while(iterator.hasNext())
					{
						DownloadMenu dm=iterator.next();
						if (dm.getBackground()==Color.orange)
						{
							dm.setBackground(null);
						}
					}
				}
				
			}
		});
		
		sort.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				JFrame frame2=new JFrame("Mood of sorting");
				frame2.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
				frame2.setPreferredSize(new Dimension(500, 700));
				JButton time=new JButton("Time");
				JButton Name=new JButton("Name");
				JButton Volume=new JButton("Volume");
				JPanel panel=new JPanel();

				frame2.add(panel);
				panel.add(time);
				panel.add(Name);
				panel.add(Volume);
				

				SpringLayout layout=new SpringLayout();
				layout.putConstraint(SpringLayout.HORIZONTAL_CENTER, time, 0, SpringLayout.HORIZONTAL_CENTER, panel);
				layout.putConstraint(SpringLayout.NORTH, time, 5, SpringLayout.NORTH, panel);
				
				layout.putConstraint(SpringLayout.HORIZONTAL_CENTER, Name, 0, SpringLayout.HORIZONTAL_CENTER, panel);
				layout.putConstraint(SpringLayout.NORTH, Name, 5, SpringLayout.SOUTH, time);
				
				layout.putConstraint(SpringLayout.HORIZONTAL_CENTER, Volume, 0, SpringLayout.HORIZONTAL_CENTER, panel);
				layout.putConstraint(SpringLayout.NORTH, Volume, 5, SpringLayout.SOUTH, Name);
				
				time.addActionListener(new ActionListener() {
					public void actionPerformed(ActionEvent arg0) {
						for(int i=0; i<AddNewDownload.array.size(); i++)
						{
							System.out.println("i="+i);
							for(int j=0; j<i; j++)
							{
								int k=0;
								String s1=AddNewDownload.array.get(j).getTime();
								String s2=AddNewDownload.array.get(j+1).getTime();
								System.out.println("S1="+s1);
								System.out.println("S2="+s2);
								while (s1.charAt(k)==s2.charAt(k) && k!=s1.length()-1)
								{
									k++;
								}
								if (s1.charAt(k)>s2.charAt(k))
								{
									System.out.println("find");
									Collections.swap(AddNewDownload.array, j, j+1);
									int z=AddNewDownload.array.get(j).getNumber();
									int x=AddNewDownload.array.get(j+1).getNumber();
									AddNewDownload.array.get(j).settingNumber(x);
									AddNewDownload.array.get(j+1).settingNumber(z);
									and.showRunTime();
								}
							}
						}	
					}
				});
				Name.addActionListener(new ActionListener() {
					public void actionPerformed(ActionEvent arg0) {
						for(int i=0; i<AddNewDownload.array.size(); i++)
						{
							System.out.println("i="+i);
							for(int j=0; j<i; j++)
							{
								int k=0;
								String s1=AddNewDownload.array.get(j).getDownloadName();
								String s2=AddNewDownload.array.get(j+1).getDownloadName();
								System.out.println("S1="+s1);
								System.out.println("S2="+s2);
								while (s1.charAt(k)==s2.charAt(k))
								{
									k++;
								}
								if (s1.charAt(k)>s2.charAt(k))
								{
									System.out.println("find");
									Collections.swap(AddNewDownload.array, j, j+1);
									int z=AddNewDownload.array.get(j).getNumber();
									int x=AddNewDownload.array.get(j+1).getNumber();
									AddNewDownload.array.get(j).settingNumber(x);
									AddNewDownload.array.get(j+1).settingNumber(z);
									and.showRunTime();
								}
							}
						}	
					}
				});
				Volume.addActionListener(new ActionListener() {
					public void actionPerformed(ActionEvent arg0) {
						for(int i=0; i<AddNewDownload.array.size(); i++)
						{
							System.out.println("i="+i);
							for(int j=0; j<i; j++)
							{
								int k=0;
								String s1=AddNewDownload.array.get(j).getVolumeOfFile();
								String s2=AddNewDownload.array.get(j+1).getVolumeOfFile();
								System.out.println("S1="+s1);
								System.out.println("S2="+s2);
								while (s1.charAt(k)==s2.charAt(k) && k!=s1.length()-1)
								{
									k++;
								}
								if (s1.charAt(k)>s2.charAt(k) )
								{
									System.out.println("find");
									Collections.swap(AddNewDownload.array, j, j+1);
									int z=AddNewDownload.array.get(j).getNumber();
									int x=AddNewDownload.array.get(j+1).getNumber();
									AddNewDownload.array.get(j).settingNumber(x);
									AddNewDownload.array.get(j+1).settingNumber(z);
									and.showRunTime();
								}
							}
						}	
					}
				});
				
				panel.setLayout(layout);
				frame2.pack();
				frame2.setVisible(true);
			}
		});
		zip.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent arg0) {
				//System.out.println("yes123123");				
				System.out.println("yes123123");
				File h;
				File f = new File("test.zip");
				ZipOutputStream out;
				try {
					System.out.println("yes");
					out = new ZipOutputStream(new FileOutputStream(f));
					h=new File("list.jdm");
					if (h.exists())
					{
						ZipEntry e = new ZipEntry("list.jdm");
						out.putNextEntry(e);
						FileInputStream in = new FileInputStream("list.jdm");
						byte[] buffer = new byte[1024];
						int len;
						while ((len = in.read(buffer)) > 0) {
		    			out	.write(buffer, 0, len);
		    		}
					}
					h=new File("URL.jdm");
					if (h.exists())
					{
						ZipEntry e = new ZipEntry("URL.jdm");
						out.putNextEntry(e);
						FileInputStream in = new FileInputStream("URL.jdm");
						byte[] buffer = new byte[1024];
						int len;
						while ((len = in.read(buffer)) > 0) {
			   			out	.write(buffer, 0, len);
			   		}
					}
					h=new File("setting.jdm");
					if (h.exists())
					{
						ZipEntry e = new ZipEntry("setting.jdm");
						out.putNextEntry(e);
						FileInputStream in = new FileInputStream("setting.jdm");
						byte[] buffer = new byte[1024];
						int len;
						while ((len = in.read(buffer)) > 0) {
			    		out	.write(buffer, 0, len);
			    	}
					}
					h=new File("queue.jdm");
					if (h.exists())
					{
						ZipEntry e = new ZipEntry("queue.jdm");
						out.putNextEntry(e);
						FileInputStream in = new FileInputStream("queue.jdm");
						byte[] buffer = new byte[1024];
						int len;
						while ((len = in.read(buffer)) > 0) {
				   		out	.write(buffer, 0, len);
				   	}
					}
					h=new File("AKS.jdm");
					if (h.exists())
					{
						ZipEntry e = new ZipEntry("list.jdm");
						out.putNextEntry(e);
						FileInputStream in = new FileInputStream("list.jdm");
						byte[] buffer = new byte[1024];
						int len;
						while ((len = in.read(buffer)) > 0) {
		    			out	.write(buffer, 0, len);
		    		}
					}
								
					out.closeEntry();

					out.close();
				} catch (FileNotFoundException e11) {
					e11.printStackTrace();
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				
			}
		});
		pause.addActionListener(new ActionListener() {
			
			public void actionPerformed(ActionEvent arg0) {
				try {
					AddNewDownload.pause();
				} catch (InterruptedException e) {
					System.out.println("Error");
					e.printStackTrace();
				}
				
			}
		});
		
		this.setLayout(layout);
	}	
}
