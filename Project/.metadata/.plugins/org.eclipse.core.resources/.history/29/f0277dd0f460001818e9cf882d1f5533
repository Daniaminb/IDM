import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;

import javax.net.ssl.HttpsURLConnection;
import javax.swing.*;
import javax.swing.event.AncestorEvent;
import javax.swing.event.AncestorListener;

import java.net.HttpURLConnection;
import java.net.URL;
/**
 * information of new download
 * @author paml
 *
 */
public class DownloadMenu extends JPanel implements Runnable {
	static int numberOfDownloads;
	int number;
	JLabel downloadName;
	boolean click;
	JTextField link;
	JTextField file;
	JProgressBar downloading;
	String time;
	JLabel speedOfDownloading;
	JLabel volumeOfFile;
	JLabel volumeOfDownloading;
	JLabel percentOfDownloading;
	int adding;
	
	
	static Timer t;
	int i;
	public DownloadMenu(String downloadName,String volumeOfFile,String time)
	{
		adding=-1;
		numberOfDownloads++;
		number=numberOfDownloads;
		int dim=5;
		this.downloadName=new JLabel(downloadName);
		downloading=new JProgressBar(0, 100);
		this.volumeOfFile=new JLabel(volumeOfFile);
		volumeOfDownloading=new JLabel("0/");
		percentOfDownloading=new JLabel("0%");
				
		file=new JTextField();
		link=new JTextField();
		
		this.time=time;
		
		this.add(this.downloadName);
		this.add(downloading);
		this.add(this.volumeOfFile);
		this.add(volumeOfDownloading);
		this.add(percentOfDownloading);
		
		downloading.setStringPainted(true);
		
		
		SpringLayout layout=new SpringLayout();
		layout.putConstraint(SpringLayout.NORTH, this.downloadName, dim , SpringLayout.NORTH, this);
		
		layout.putConstraint(SpringLayout.NORTH, downloading, dim , SpringLayout.SOUTH, this.downloadName);
		layout.putConstraint(SpringLayout.WEST, downloading, dim , SpringLayout.WEST, this);
		
		
		layout.putConstraint(SpringLayout.NORTH, percentOfDownloading, dim , SpringLayout.SOUTH, this.downloadName);
		layout.putConstraint(SpringLayout.EAST, percentOfDownloading, -dim , SpringLayout.EAST, this);
	
		layout.putConstraint(SpringLayout.EAST, downloading, -dim , SpringLayout.WEST, percentOfDownloading);
		
		layout.putConstraint(SpringLayout.NORTH, this.volumeOfFile , dim , SpringLayout.SOUTH, downloading );
		layout.putConstraint(SpringLayout.EAST, this.volumeOfFile , -dim , SpringLayout.EAST,this );
		
		layout.putConstraint(SpringLayout.NORTH, volumeOfDownloading , dim , SpringLayout.SOUTH, downloading );
		layout.putConstraint(SpringLayout.EAST, volumeOfDownloading , -1 , SpringLayout.WEST,this.volumeOfFile );
		
		t=new Timer(100, new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				if (i==100)
				{
					System.out.println("Yes");
					t.stop();
				}
				else
				{
					i++;
					downloading.setValue(i);
					show();
				}
			}
		});
		this.addMouseListener(new MouseListener() {
			public void mouseReleased(MouseEvent arg0) {
				
			}
			public void mousePressed(MouseEvent arg0) {
				setBackground(Color.blue);
				AddNewDownload.click(number);
				
			}
			public void mouseExited(MouseEvent arg0) {
				
			}
			public void mouseEntered(MouseEvent arg0) {
				
			}
			public void mouseClicked(MouseEvent arg0) {
	
				
			}
		});
		
		
		this.downloadName.addMouseListener(new MouseListener() {
			public void mouseReleased(MouseEvent arg0) {
				
			}
			
			public void mousePressed(MouseEvent arg0) {
				setBackground(Color.green);
				
			}
			public void mouseExited(MouseEvent arg0) {
				setBackground(null);
			}
			
			@Override
			public void mouseEntered(MouseEvent arg0) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void mouseClicked(MouseEvent arg0) {
				if(arg0.getButton() == MouseEvent.BUTTON3) {
		            System.out.println("yes");
		          }
				if(arg0.getButton() == MouseEvent.BUTTON1) {
					ShowInformation inf1=new ShowInformation(link.getText(), file.getText(),time,"100","100","100");
					inf1.show();
					System.out.println(link.getText());
					System.out.println("asdasdasd");
		          }
				
			}
		});
		this.setLayout(layout);
	}
	public void setURL(String dic)
	{
		link.setText(dic);
	}
	public void setFile(String dic)
	{
		file.setText(dic);
	}
	public void setClick(boolean a)
	{
		click=a;
	}
	public boolean getClick()
	{
		return click;
	}
	public String getDownloadName()
	{
		return downloadName.getText();
	}
	public String getURL()
	{
		return link.getText();
	}
	public String getFile()
	{
		return file.getText();
	}
	public String getVolumeOfFile()
	{
		return  volumeOfFile.getText();
	}
	public String getVolumeOfDownloading()
	{
		return  volumeOfDownloading.getText();
	}
	public String getTime()
	{
		return time;
	}
	public void setVolumeOfDownloading(String volume)
	{
		volumeOfDownloading.setText(volume);
	}
	public void setNumber()
	{
		number--;
	}
	public int getNumber()
	{
		return number;
	}
	public void settingNumber(int n)
	{
		number=n;
	}
	@Override
	public void run() {
		SwingWorker<Void, Void> worker=new SwingWorker<Void,Void>()
		{
			@Override
			protected Void doInBackground() throws Exception {
				try {
					System.out.println("asdasdasd");
					File f=new File(file.getText()+"//Erfan-Aghazadeh-(Ft-Gdaal).mp3");
					URL url=new URL(null,link.getText());
					String kk=link.getText();
					int size=kk.length();
					size--;
					while(kk.charAt(size)!='/')
					{
						size--;	
					}
					kk=kk.substring(size+1, kk.length());
					downloadName.setText(kk);
					HttpURLConnection http=(HttpURLConnection)url.openConnection();
					volumeOfFile.setText(http.getContentLength()+"");
					BufferedInputStream in=new BufferedInputStream(http.getInputStream());
					FileOutputStream fos=new FileOutputStream(f);
					BufferedOutputStream bout=new BufferedOutputStream(fos,1024);
					byte[] buffer=new byte[1024];
					int read=0;
					Double pd=0.0;
					Double pp=new Double(0.0);
					read=in.read(buffer,0,1024);
					while (read>= 0)
					{
						bout.write(buffer,0,read);
						pp+=read;
						volumeOfDownloading.setText(pp+"");
						pd=(pp*100)/(http.getContentLength());
						downloading.setValue(pd.intValue());
						percentOfDownloading.setText(pd.intValue()+"%");
						System.out.println("Downloading");
						read=in.read(buffer,0,1024);
					}
					System.out.println("FINISH");
					bout.close();
					in.close();
				}
				catch(IOException ex)
				{
					ex.printStackTrace();
				}
				return null;
			}
		};
		worker.execute();
	}
}
